import html
from typing import List

class HTMLBuilder:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å HTML-—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —ç–∫–∑–µ–º–ø–ª—è—Ä HTMLBuilder
    –ü—Ä–∏–º–µ—Ä: builder = HTMLBuilder()
    """

    def __init__(self):
        self.lines: list[str] = []

    def _escape(self, text: str | None) -> str:
        if not text:
            return "‚Äî"
        return html.escape(str(text))

    def title(self, text: str, emoji: str = "üìå") -> "HTMLBuilder":
        '''
        HTMLBuilder().title("–ü—Ä–æ—Ñ–∏–ª—å").build()
        <b>üìå –ü—Ä–æ—Ñ–∏–ª—å</b>
        '''
        self.lines.append(f"<b>{emoji} {self._escape(text)}</b>")
        return self

    def field(self, label: str, value: str | None, emoji: str = "‚ñ™Ô∏è") -> "HTMLBuilder":
        '''
        HTMLBuilder().field("–ò–º—è", "–ì–∞–º–∏–¥").build()
        ‚ñ™Ô∏è <b>–ò–º—è:</b> <code>–ì–∞–º–∏–¥</code>
        '''
        self.lines.append(f"{emoji} <b>{self._escape(label)}:</b> <code>{self._escape(value)}</code>")
        return self

    def list(self, items: List[str], emoji: str = "‚Ä¢") -> "HTMLBuilder":
        '''
        HTMLBuilder().list(["–£—Å–ª—É–≥–∞ A", "–£—Å–ª—É–≥–∞ B"]).build()
        ‚Ä¢ –£—Å–ª—É–≥–∞ A
        ‚Ä¢ –£—Å–ª—É–≥–∞ B
        '''
        for item in items:
            self.lines.append(f"{emoji} {self._escape(item)}")
        return self

    def link(self, label: str, url: str, emoji: str = "üîó") -> "HTMLBuilder":
        '''
        HTMLBuilder().link("–°–ø—Ä–∞–≤–∫–∞", "https://example.com/help").build()
        üîó <a href="https://example.com/help">–°–ø—Ä–∞–≤–∫–∞</a>
        '''
        self.lines.append(f'{emoji} <a href="{html.escape(url)}">{self._escape(label)}</a>')
        return self

    def note(self, text: str, emoji: str = "üí¨") -> "HTMLBuilder":
        '''
        HTMLBuilder().note("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É").build()
        üí¨ <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>
        '''
        self.lines.append(f"{emoji} <i>{self._escape(text)}</i>")
        return self

    def blank(self) -> "HTMLBuilder":
        self.lines.append("")
        return self

    def code_block(self, code: str, language: str = "") -> "HTMLBuilder":
        '''
        HTMLBuilder().code_block("print('Hello')").build()
        <pre><code>print('Hello')</code></pre>
        '''
        escaped = html.escape(code)
        self.lines.append(f"<pre><code>{escaped}</code></pre>")
        return self

    def quote(self, text: str) -> "HTMLBuilder":
        '''
        HTMLBuilder().quote("–≠—Ç–æ –≤–∞–∂–Ω–æ").build()
        ‚Ä¢ –≠—Ç–æ –≤–∞–∂–Ω–æ
        '''
        self.lines.append(f"‚Ä¢ {self._escape(text)}")
        return self

    def render_user(self, user) -> "HTMLBuilder":
        return (
            self.title("–ü—Ä–æ—Ñ–∏–ª—å:", "üë§")
                .field("–ò–º—è", user.first_name)
                .field("Id", user.telegram_id)
                .field("–†–æ–ª—å", user.role)
        )

    def build(self) -> str:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–æ—Ç–æ–≤—ã–π HTML-—Ç–µ–∫—Å—Ç
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: str - HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        –ü—Ä–∏–º–µ—Ä: html_text = builder.title("–ó–∞–≥–æ–ª–æ–≤–æ–∫").field("–ü–æ–ª–µ", "–∑–Ω–∞—á–µ–Ω–∏–µ").build()
        """

        return "\n".join(self.lines)
